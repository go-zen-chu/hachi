// Code generated by MockGen. DO NOT EDIT.
// Source: gh.go

// Package gh is a generated GoMock package.
package gh

import (
	gomock "github.com/golang/mock/gomock"
	git "gopkg.in/src-d/go-git.v4"
	reflect "reflect"
)

// MockGitHubClient is a mock of GitHubClient interface
type MockGitHubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientMockRecorder
}

// MockGitHubClientMockRecorder is the mock recorder for MockGitHubClient
type MockGitHubClientMockRecorder struct {
	mock *MockGitHubClient
}

// NewMockGitHubClient creates a new mock instance
func NewMockGitHubClient(ctrl *gomock.Controller) *MockGitHubClient {
	mock := &MockGitHubClient{ctrl: ctrl}
	mock.recorder = &MockGitHubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHubClient) EXPECT() *MockGitHubClientMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *MockGitHubClient) Clone(repoURI, dir string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", repoURI, dir)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone
func (mr *MockGitHubClientMockRecorder) Clone(repoURI, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGitHubClient)(nil).Clone), repoURI, dir)
}

// Commit mocks base method
func (m *MockGitHubClient) Commit(r *git.Repository, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", r, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockGitHubClientMockRecorder) Commit(r, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGitHubClient)(nil).Commit), r, msg)
}

// Push mocks base method
func (m *MockGitHubClient) Push(r *git.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockGitHubClientMockRecorder) Push(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockGitHubClient)(nil).Push), r)
}

// PullRequest mocks base method
func (m *MockGitHubClient) PullRequest(owner, repo, title, head, body, baseBranch string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullRequest", owner, repo, title, head, body, baseBranch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullRequest indicates an expected call of PullRequest
func (mr *MockGitHubClientMockRecorder) PullRequest(owner, repo, title, head, body, baseBranch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullRequest", reflect.TypeOf((*MockGitHubClient)(nil).PullRequest), owner, repo, title, head, body, baseBranch)
}
